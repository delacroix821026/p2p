<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.newland.financial</groupId>
	<artifactId>lfqpay-client</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>lfqpay-client</name>

	<properties>
		<spring.boot.version>1.5.6.RELEASE</spring.boot.version>
		<junit.version>4.12</junit.version>
		<lo4j2.version>2.6.2</lo4j2.version>
		<!-- checkStyle控制台输出 -->
		<checkstyle.consoleOutput>false</checkstyle.consoleOutput>
		<!-- checkStyle错误中断发布 -->
		<checkstyle.failOnViolation>true</checkstyle.failOnViolation>
		<!-- checkStyle跳过检验 -->
		<checkstyle.skip>false</checkstyle.skip>
		<!-- junit跳过测试 -->
		<junit.skipTests>false</junit.skipTests>
		<!-- junit错误中断发布 -->
		<junit.testFailureIgnore>false</junit.testFailureIgnore>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Dalston.SR3</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>jdk_complier</id>
			<build>
				<defaultGoal>compile</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.1</version>
						<configuration>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Life Cycle profile declear -->
		<profile>
			<id>dev</id>
			<properties>
				<profile.active>dev</profile.active>
                <package.environment>dev</package.environment>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<profile>test</profile>
                <package.environment>test</package.environment>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<profile>prod</profile>
                <package.environment>prod</package.environment>
			</properties>
		</profile>
	</profiles>

	<dependencies>
		<!-- p2p -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bus-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.18</version>
		</dependency>
		<dependency>
			<groupId>com.newland.financial</groupId>
			<artifactId>p2p_installment_server_domain</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>

		<!-- LFQ -->
		<dependency>
		    <groupId>org.easymock</groupId>
		    <artifactId>easymock</artifactId>
		    <version>3.3</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>3.1.0</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>org.bouncycastle</groupId>
		    <artifactId>bcprov-jdk16</artifactId>
		    <version>1.45</version>
		</dependency>
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.3</version>
		</dependency>
		<dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		    <version>1.5</version>
		</dependency>
		<dependency>
		    <groupId>commons-logging</groupId>
		    <artifactId>commons-logging</artifactId>
		    <version>1.1</version>
		</dependency>
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.2.2</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.12</version>
		</dependency>
		<dependency>
			<groupId>com.lfqpay</groupId>
			<artifactId>lfqpay-client</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.37</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>lfqpay-client</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>1.5.6.RELEASE</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>repackage</goal>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
				<configuration> <!--指定该Main Class为全局的唯一入口-->
					<mainClass>com.newland.financial.p2p.Application</mainClass>
					<layout>ZIP</layout>
					<attach>false</attach>
					<!--
                    <excludeArtifactIds>p2p_server_domain, p2p_server_dao， p2p_server_service</excludeArtifactIds>
                    -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<id>push-image</id>
						<phase>install</phase>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--<imageName>delacroix821026/firstdemo:${project.build.finalName}</imageName>-->
					<imageName>nexusserver:8082/${project.build.finalName}</imageName>
					<baseImage>daocloud.io/library/java:latest</baseImage>

					<!--<cmd>docker login 192.168.10.38:8082 -u admin -p admin123%</cmd>-->
					<!--<volumes><volume>/home</volume></volumes>-->

					<entryPoint>[ "sh", "-c", "/home/DockerCommand/SetJVM.sh \"${project.build.finalName}\"" ]</entryPoint>
					<!--<dockerDirectory>docker</dockerDirectory>-->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<forceTags>true</forceTags>
					<!-- <imageTags>
                         <imageTag>${project.version}</imageTag>
                         <imageTag>latest</imageTag>
                     </imageTags>-->
					<serverId>p2p-docker-hub</serverId>
					<registryUrl>http://nexusserver:8082/</registryUrl>
					<!--<registryUrl>https://index.docker.io/v1/</registryUrl>-->
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<additionalClasspathElements>
						<!-- the following two lines, causes intellij coverage to stop working -->
						<additionalClasspathElement>${project.build.sourceDirectory}</additionalClasspathElement>
						<additionalClasspathElement>${project.build.testSourceDirectory}</additionalClasspathElement>
					</additionalClasspathElements>
					<skip>false</skip>
					<testFailureIgnore>${junit.testFailureIgnore}</testFailureIgnore>
					<argLine>${surefireArgLine}</argLine>

					<systemProperties>
						<property>
							<name>DEVLOPER_NAME</name>
							<value>test</value>
						</property>
						<property>
							<name>SPRING_PROFILES_ACTIVE</name>
							<value>${profile.active}</value>
						</property>
					</systemProperties>
				</configuration>
				<executions>
					<execution>
						<id>run-integration-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>${junit.skipTests}</skip>
							<includes>
								<include>**/integration/**/*.java</include>
							</includes>
						</configuration>
					</execution>
					<execution>
						<id>run-test</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>${junit.skipTests}</skip>
							<includes>
								<include>**/unit/**/*.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 单元测试代码覆盖率 -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.8</version>
				<configuration>
					<skip>${junit.skipTests}</skip>
					<output>file</output>
					<append>true</append>
				</configuration>
				<executions>
					<!--
                       准备指向Jacoco运行时Agent的属性，在测试执行之前传递给虚拟机参数
                    -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- 设置覆盖率数据文件路径 -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<!-- 设置属性名称，Maven surefire插件需要引用这个作为命令行参数
                            -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!--
                        确保在单元测试执行之后生成覆盖率报告
                    -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- 引用覆盖率文件的路径-->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- 设置覆盖率报告存放路径. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.16</version>
				<executions>
					<execution>
						<id>default-integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- 代码规范检测 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
				<dependencies>
					<dependency>
						<groupId>com.newland.financial</groupId>
						<artifactId>p2p_common</artifactId>
						<version>1.0.0-SNAPSHOT</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<configuration>
							<!--<cacheFile>${project.build.directory}/site/checkstyle/checkstyle-cachefile</cacheFile>-->
							<configLocation>/sun-checkstyle.xml</configLocation>
							<!--<propertiesLocation>checkstyle.properties</propertiesLocation>-->
							<encoding>UTF-8</encoding>
							<consoleOutput>true</consoleOutput>
							<!--<failsOnError>true</failsOnError>
                            <skip>true</skip>-->
							<failOnViolation>true</failOnViolation>

							<outputFile>${project.reporting.outputDirectory}/checkstyle/checkstyle.xml</outputFile>
						</configuration>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- 子项目版本控制 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>

            <!-- 不同环境的配置文件选择 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <filtering>true</filtering>
                </configuration>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
    　　　　　　　　　　　　　　<!-- 覆盖原有文件 -->
    　　　　　　　　　　　　　　<overwrite>true</overwrite>
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                            <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->
                            <!-- 待处理的资源定义 -->
                            <resources>
                                <resource>
                                    <!-- 指定resources插件处理哪个目录下的资源文件 -->
                                    <directory>src/main/resources/${package.environment}</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>

	<distributionManagement>
		<repository>
			<id>nexus</id>
			<name>Releases</name>
			<url>http://nexusserver:8081/repository/p2p_maven_release</url>
		</repository>
		<snapshotRepository>
			<id>nexus</id>
			<name>Snapshot</name>
			<url>http://nexusserver:8081/repository/p2p_maven_snapshot</url>
		</snapshotRepository>
	</distributionManagement>

</project>